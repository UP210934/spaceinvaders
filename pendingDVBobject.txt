#include <SFML/Graphics.hpp>
#include<string>
#include<iostream>
#include<cstdlib>
#include<vector>

//Std::vector<int> name
//push_back(3);

class ScreenSaverIMG{
private:
    float positionx_;
    float positiony_;
    int countspirtes_;
    bool statInit;
    sf::Sprite main_sprite_;
    std::vector<sf::Texture> all_textures;

   void AsingPosition(float pos_x, float pos_y){
        sf::Vector2 converted(pos_x,pos_y);
        this->positionx_=pos_x;
        this->positiony_=pos_y;
        this->main_sprite_.setPosition(converted);
    }
    void AsingTexture(sf::Texture current_to_asing){
        this->main_sprite_.setTexture(current_to_asing);
    }

    bool initializer_textures(){
        int no_tectures = 4;
        //test dinamico

        sf::Texture texture;
        if (!texture.loadFromFile("media/download.png"))
            return EXIT_FAILURE;
        //sf::Sprite rect(texture);
        this->all_textures.push_back(texture);


        sf::Texture texture2;
        if (!texture2.loadFromFile("media/downloadimg.png"))
            return EXIT_FAILURE;
        this->all_textures.push_back(texture2);

        sf::Texture texture3;
        if (!texture3.loadFromFile("media/downloadred.png"))
            return EXIT_FAILURE;
         this->all_textures.push_back(texture3);

        sf::Texture texture4;
        if (!texture4.loadFromFile("media/downloadrblue.png"))
            return EXIT_FAILURE;
        this->all_textures.push_back(texture4);


        return true;

    }

    void physics(){
    //"physics"
    int random = rand() % 4;
    float xVelocity = 4;
    float yVelocity = 4;
    sf::Vector2f rectanglePosition(this->positionx_, this->positiony_);
        if (rectanglePosition.x < 0 || rectanglePosition.x > 1280 - 216){
            xVelocity *= -1;
              //Randomize
        AsingTexture(this->all_textures[random]);
        }

       /* if (rectanglePosition.y < 0 || rectanglePosition.y > 720 - 94) {
            yVelocity *= -1;
              //Randomize

        if(random == 0){
                rect.setTexture(texture,false);
        }
         else if(random == 1){
                rect.setTexture(texture2,false);
        }
         else if(random == 2){
                rect.setTexture(texture3,false);
        }
        else if(random == 3){
                rect.setTexture(texture4,false);
        }
*/
        rectanglePosition.x += xVelocity;
        rectanglePosition.y += yVelocity;

        AsingPosition(rectanglePosition.x,rectanglePosition.y);
        //this->main_sprite_.setPosition(rectanglePosition);

        //sf::Vector2f igualarposicion(rect.getPosition().x,rect.getPosition().y);
         //std::cout<<"Posicion x: "<<igualarposicion.x<<"  y:"<<igualarposicion.y<<std::endl;


    }

public:
    //Vector de texturas
    ScreenSaverIMG(float pos_x, float pos_y){
        if (pos_x!=NULL && pos_y !=NULL)
        AsingPosition(pos_x,pos_y);
        initializer_textures();
        this->statInit= true;

    }
    std::string ShowPosition(){
        sf::Vector2 a =  this->main_sprite_.getPosition();
        std::string ret_value;
        ret_value =  std::to_string(a.x) +"," + std::to_string(a.y);
        return ret_value;

    }
    void StartScreenSaver(sf::RenderWindow &window){
        if(this->statInit){
            this->physics();
             window.draw(this->main_sprite_);
        }
    }

};

/*
sf::Texture cambiarcolor(){
    sf::Texture a;
    int random = rand() % 4;
     std::cout<<random;
        if(random == 0){
                return &texture();
        }
         else if(random == 1){
                rect.setTexture(texture2,false);
        }
         else if(random == 2){
                rect.setTexture(texture3,false);
        }
        else if(random == 3){
                rect.setTexture(texture4,false);
        }


return a;
}
*/
int main()
{
    sf::RenderWindow window(sf::VideoMode(1280, 720), "My Program");
    window.setFramerateLimit(60);

    //Textura
    /*
     sf::Texture texture;
        if (!texture.loadFromFile("media/download.png"))
            return EXIT_FAILURE;
        sf::Sprite rect(texture);
        sf::Texture texture2;
        if (!texture2.loadFromFile("media/downloadimg.png"))
            return EXIT_FAILURE;

        sf::Texture texture3;
        if (!texture3.loadFromFile("media/downloadred.png"))
            return EXIT_FAILURE;

        sf::Texture texture4;
        if (!texture4.loadFromFile("media/downloadrblue.png"))
            return EXIT_FAILURE;
        */

    //sf::RectangleShape rect;

    /*
    sf::Vector2f rectanglePosition(600, 350);


    rect.setPosition(rectanglePosition);
    //rect.setSize(sf::Vector2f(100, 100));

    float xVelocity = 4;
    float yVelocity = 4;
    int imgcount = 0;
*/
ScreenSaverIMG hola = ScreenSaverIMG(0,0);
std::cout<<"Pos Actual: " << hola.ShowPosition();



    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if (event.type == sf::Event::Closed) window.close();

            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Escape)) window.close();
        }
        /*
        int random = rand() % 4;
        //"physics"
        if (rectanglePosition.x < 0 || rectanglePosition.x > 1280 - 216){
            xVelocity *= -1;
              //Randomize

        if(random == 0){
                rect.setTexture(texture,false);
        }
         else if(random == 1){
                rect.setTexture(texture2,false);
        }
         else if(random == 2){
                rect.setTexture(texture3,false);
        }
        else if(random == 3){
                rect.setTexture(texture4,false);
        }



        }
        if (rectanglePosition.y < 0 || rectanglePosition.y > 720 - 94) {
            yVelocity *= -1;
              //Randomize

        if(random == 0){
                rect.setTexture(texture,false);
        }
         else if(random == 1){
                rect.setTexture(texture2,false);
        }
         else if(random == 2){
                rect.setTexture(texture3,false);
        }
        else if(random == 3){
                rect.setTexture(texture4,false);
        }

        }



        rectanglePosition.x += xVelocity;
        rectanglePosition.y += yVelocity;
        rect.setPosition(rectanglePosition);

        //sf::Vector2f igualarposicion(rect.getPosition().x,rect.getPosition().y);
         //std::cout<<"Posicion x: "<<igualarposicion.x<<"  y:"<<igualarposicion.y<<std::endl;
        window.clear();



        //render
        */
        //window.draw(rect);
        hola.StartScreenSaver(window);
        window.display();
    }



    return 0;
}
